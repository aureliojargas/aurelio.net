#!/bin/bash
# Check for errors on the generated site

error() {
    echo
    echo "**** FAILED :("
    echo
    echo "$*" | head -n 40
    echo
    echo "Total of $(echo "$*" | wc -l) errors found."
    exit 1
}
cgrep() {
    grep --color=always "$@"
}

# Make sure we are at the repository root
cd $(dirname "$0")
cd ..

repo_root="$PWD"
site_root="$repo_root/_site"
all_files=$(_scripts/list-site-files all)
text_files=$(_scripts/list-site-files text)
css_files=$(echo "$text_files" | grep '\.css$')

# Search for the {{...}} pattern in repo files
check_accidental_liquid_markup() {
    git grep -I '{{.*}}' |

        # Remove false positives
        grep -v '^_includes/' |
        grep -v '^_layouts/' |
        grep -v '^_plugins/' |
        grep -v '^_scripts/' |
        grep -v '^bin/python/txt2tags-r900\.py' |
        grep -v '^blog/index\.html' |
        grep -v '^curso/index\.md' |
        grep -v '^feed\.xml' |
        grep -v '^index\.html' |
        grep -v '^tags/index\.html' |
        grep -v '^tela-preta/index\.md' |
        grep -v '^vim/vimrc-ivan\.txt' |

        # txt2tags files
        grep -v '^shell/dialog/index' |
        cat -
}

# URLs that point to folders should have the trailing slash #44
check_link_no_trailing_slash() {
    # Match all URLs with no trailing slash with the folder list
    comm -12 <(list-site-urls file) <(list-site-files dir | sed 's/^_site//')
}

# Do not link URLs that are gone (410)
check_link_to_gone() {
    _scripts/list-urls-gone |
        grep -Fxv '/recados.php' | # historical
        # Exception: top dir is gone, but not its children
        # Add harmless ? at the end to avoid /$ detectionin grep-* script
        sed -r '/^\/blog\/20..\/$/ s/$/?/' |
        xargs _scripts/grep-url-in-site
}

# Do not link URLs that are redirected (301)
check_link_to_redirected() {
    _scripts/list-urls-redirected |
        grep -Ev '^(/feed/|/blog/feed/)$' | # wontfix
        # Netlify glob: /icon16/* /icon/16/:splat
        # Just remove trailing *, dirs are already matched partially
        sed 's|/\*$|/|g' |
        xargs _scripts/grep-url-in-site |
        # Remove false positives
        grep -vF '_site/sed/programas/rss.sed' |
        grep -vF '_site/articles/hungry-sumo-high-scores.html' |
        grep -vE '_site/shell/dialog/index-v.\.t2t.*https?://aurelio.net/doc/dialog' |
        grep -vE '_site/blog/2007/11/26/atalhos-no-site-htaccess-redirecionamento-e-erro-404/index.html.*https?://aurelio.net/(canivete|miguxeitor)'
}

# Do not link foo/index.html, but foo/
check_link_to_index_html() {
    cgrep 'href="[^"]*/index\.html"' $text_files
}

# Do not use relative URLs in links, images, CSS - #20
check_relative_urls() {
    # ./ and ../ at URL start or middle
    cgrep -i -E '(src|href)="([^"]*/)?\.\.?/' $text_files

    # Non absolute, ./ and ../ at middle
    cgrep -i -E 'url\([^/]' $css_files
    cgrep -i -E 'url\(/([^)]*/)?\.\.?/' $css_files
}

# Do not use http://aurelio.net (non-https) anymore
check_http_aurelionet() {
    git grep -I -i -F 'http://aurelio.net' |
        # ignore this script
        grep -v '^_scripts/check-site:' |
        # ignore old stuff I don't want to touch
        grep -v -E '^bin/[^/]*/[^.]*\.(py|phps|txt):' |
        grep -v '^bin/bash/oofind:' |
        grep -v '^curso/sdsl-2/desenvolvedor/desenvolvedor' |
        grep -v '^doc/direto/anuncio.txt:' |
        grep -v '^doc/irc-mar2005.html:' |
        grep -v '^misc/adventure-mapa.txt:' |
        grep -v '^misc/entrevista-brlinux.txt:' |
        grep -v '^moneylog/browser/app/index.html:' |
        grep -v '^moneylog/moneylog4-txt.html:' |
        grep -v '^moneylog/moneylog.\.html:' |
        grep -v '^moneylog/portable/demo/index.html:' |
        grep -v '^moneylog/portable/moneylog5.html:' |
        grep -v '^projects/adiumbook/appcast.xml:' |
        grep -v '^projects/adiumbook/appcast-beta.xml:' |
        grep -v '^projects/moneylog/moneylog.\.html:' |
        grep -v '^projects/moneylog/online/index.html:' |
        grep -v '^projects/padfiles/' |
        grep -v '^projects/sedarkanoid/arkanoid.sed.html:' |
        grep -v '^projects/sedsokoban/sokoban.sed.html:' |
        grep -v '^sed/programas/arkanoid/arkanoid-1\..\.sed:' |
        grep -v '^sed/programas/arkanoid/arkanoid.sed:' |
        grep -v '^sed/programas/arkanoid/arkanoid.sed.html:' |
        grep -v '^sed/programas/rss.sed:' |
        grep -v '^sed/programas/txt2sgml-sed/' |
        grep -v '^sed/sokoban/sokoban.sed:' |
        grep -v '^sed/sokoban/sokoban.sed.html:' |
        grep -v '^shell/apostila/[^.:]*\.txt:' |
        grep -v '^shell/dialog/index-v.\.t2t:' |
        grep -v '^shell/dialog/[^.]*\.sh:' |
        grep -v '^shell/dialog/index.html.*# Este script faz parte do' |
        grep -v '^shell/dialog/index.html.*Novo endereÃ§o oficial' |
        grep -v '^surf/misc/add_watermark_text:' |
        grep -v '^surf/misc/marca-dagua.svg:' |
        grep -v '^shell/apostila/index.html.*https://web.archive.org/web/20040402110103/' |
        grep -v '^_posts/2014-10-02-mobile-first.md.*http://web.archive.org/web/20140625095047/' |
        cgrep -i 'http://aurelio.net'  # highlight
}

# Avoid the use of full https:// URLs, prefer root-relative - #46
check_link_to_full_url() {
    # CSS:  url(https://...)
    # HTML: src="https://..."
    # HTML: href="https://..."
    grep -i -E '(url\(|src="|href=")https://aurelio\.net' $text_files |
        grep -v '<link rel="canonical"' |
        grep -v '^_site/feed\.xml:' |
        grep -v '^_site/moneylog/browser/app/index.html:' |
        grep -v '^_site/moneylog/portable/demo/index.html:' |
        grep -v '^_site/moneylog/portable/moneylog5.html:' |
        grep -v '^_site/web/tagmenu.html:' |
        # Link text and URL are the same, keep it
        grep -v -i -E ' href="([^"]+)">\1</a>' |
        cgrep -i -E '(src|href)="https://aurelio.net'
}

# The root-relative URL point to an existent file or folder?
check_root_relative_target() {
    local urls=$(_scripts/list-site-urls uniq)
    local files=$(echo "$all_files" | sed 's/^_site//')
    comm -23 <(echo "$urls") <(echo "$files") |

        # remove false positives
        grep -v '^/coisinha/caraoucoroa/. + moeda' |  # js
        grep -v '^/coisinha/subwaytor/carregando\.gif$' |  # comment
        grep -v '^/bin/sed/arkanoid$' |  # redirect
        grep -v '^/bin/sed/rss\.sed$' |  # redirect
        grep -v '^/dumbs/imagens/shows/2001' |  # comment
        grep -v '^/dumbs/tranqueiras\.html$' |  # comment
        grep -v '^/feed$' |  # redirect
        grep -v '^/foto/bizarro\.html$' |  # comment
        grep -v '^/recados\.php$' |  # historic
        cat -
}

# No http:// for resources (mixed content) - #18
check_mixed_content() {
    cgrep -i -F 'src="http://' $text_files
    cgrep -i '<link [^>]*href="http://' $text_files
}

# Grep for <tag foo=bar> instead of <tag foo="bar">
check_unquoted_attributes() {
    echo "$text_files" |

        # Remove false positives
        grep -F -x -v '_site/bin/python/txt2tags-r900.py' |
        grep -F -x -v '_site/sed/programas/yahoogroups-kill-sig.sed' |
        grep -F -x -v '_site/vim/vimrc-ivan.txt' |

        # Check
        xargs grep -i -E '<[a-z]+ ([^>]* )?[a-z]+=[^\"]' |

        # Remove false positives
        grep -F -i -v 'content="text/html; charset=utf-8"'
}

check_windows_linebreak() {
    echo "$text_files" |

        # Remove false positives
        grep -v '^_site/projects/moneylog/' |
        grep -v '^_site/moneylog/' |

        # Disable all file tests except the CRLF-related: ascii, text.
        # Execution time gains: from 30s to 0.4s \o/
        xargs file -e apptype -e cdf -e compress -e elf -e encoding -e soft -e tar -e json -e tokens |
        grep -F CRLF
}

active_checks="
    check_accidental_liquid_markup
    check_windows_linebreak
    check_unquoted_attributes
    check_link_no_trailing_slash
    check_mixed_content
    check_relative_urls
    check_http_aurelionet
    check_link_to_full_url
    check_root_relative_target
    check_link_to_index_html
    check_link_to_gone
    check_link_to_redirected
"

for check in $active_checks
do
    echo "Running $check..."
    wrong=$($check)
    test -n "$wrong" && error "$wrong"
done
