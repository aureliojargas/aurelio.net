#!/bin/bash
# Check for errors on the generated site

error() {
    echo
    echo "**** FAILED :("
    echo
    echo "$*" | head -n 40
    exit 1
}
cgrep() {
    grep --color=always "$@"
}

# Make sure we are at the repository root
cd $(dirname "$0")
cd ..

repo_root="$PWD"
site_root="$repo_root/_site"
files=$(_scripts/list-site-text-files)

# Search for the {{...}} pattern in repo files
check_accidental_liquid_markup() {

    # This check runs at the repo root
    cd "$repo_root" && git grep -I '{{.*}}' |

        # Remove false positives
        grep -v '^_includes/' |
        grep -v '^_layouts/' |
        grep -v '^_plugins/' |
        grep -v '^_scripts/' |
        grep -v '^bin/python/txt2tags-r900\.py' |
        grep -v '^blog/index\.html' |
        grep -v '^curso/index\.md' |
        grep -v '^feed\.xml' |
        grep -v '^index\.html' |
        grep -v '^tags/index\.html' |
        grep -v '^tela-preta/index\.md' |
        grep -v '^vim/vimrc-ivan\.txt' |

        # txt2tags files
        grep -v '^projects/config.t2t' |
        grep -v '^projects/emomemory/index.t2t' |
        grep -v '^shell/dialog/index' |
        grep -v '^[^:]*\.t2t:.*{{br}}' |
        cat -
    cd "$site_root"
}

check_missing_article_date() {
    # This check runs at the repo root
    # This is the default date inserted by the txt2tags2html script
    git grep '^date: 1999-12-31'
}

# Do not link URLs that are gone (410)
check_link_to_gone() {

    _scripts/list-urls-gone |
        grep -Fxv '/recados.php' | # historical
        # Exception: top dir is gone, but not its children
        # Add harmless ? at the end to avoid /$ detectionin grep-* script
        sed -r '/^\/blog\/20..\/$/ s/$/?/' |
        xargs _scripts/grep-url-in-site
}

# Do not link URLs that are redirected (301)
check_link_to_redirected() {
    _scripts/list-urls-redirected |
        grep -Ev '^(/feed/|/blog/feed/)$' | # wontfix
        # Netlify glob: /icon16/* /icon/16/:splat
        # Just remove trailing *, dirs are already matched partially
        sed 's|/\*$|/|g' |
        xargs _scripts/grep-url-in-site |
        # Remove false positives
        grep -vF '_site/sed/programas/rss.sed' |
        grep -vF '_site/articles/hungry-sumo-high-scores.html' |
        grep -vE '_site/shell/dialog/index-v.\.t2t.*https?://aurelio.net/doc/dialog' |
        grep -vE '_site/blog/2007/11/26/atalhos-no-site-htaccess-redirecionamento-e-erro-404/index.html.*https?://aurelio.net/(canivete|miguxeitor)'
}

# Do not link foo/index.html, but foo/
check_link_to_index_html() {
    cgrep 'href="[^"]*/index\.html"' $files
}

# Do not use relative URLs in links and images
check_relative_urls() {
    # ./
    cgrep -i -E '(src|href)="\./' $files
    cgrep -i -E '(src|href)="[^"]*/\./' $files

    # ../
    cgrep -i -E '(src|href)="\.\./' $files
    cgrep -i -E '(src|href)="[^"]*/\.\./' $files
}

# No http:// for resources (mixed content) - #18
check_mixed_content() {
    cgrep -i -F 'src="http://' $files
    cgrep -i '<link [^>]*href="http://' $files
}

# Grep for <tag foo=bar> instead of <tag foo="bar">
check_unquoted_attributes() {
    echo "$files" |

        # Remove false positives
        grep -F -x -v '_site/bin/python/txt2tags-r900.py' |
        grep -F -x -v '_site/sed/programas/yahoogroups-kill-sig.sed' |
        grep -F -x -v '_site/vim/vimrc-ivan.txt' |

        # Check
        xargs grep -i -E '<[a-z]+ ([^>]* )?[a-z]+=[^\"]' |

        # Remove false positives
        grep -F -i -v 'content="text/html; charset=utf-8"' |
        # txt2tags postproc filter to fix unquoted
        grep -F -v '.t2t:%!postproc'
}

check_windows_linebreak() {
    echo "$files" |

        # Remove false positives
        grep -v '^_site/projects/moneylog/' |
        grep -v '^_site/moneylog/' |

        # Disable all file tests except the CRLF-related: ascii, text.
        # Execution time gains: from 30s to 0.4s \o/
        xargs file -e apptype -e cdf -e compress -e elf -e encoding -e soft -e tar -e json -e tokens |
        grep -F CRLF
}

active_checks="
    check_accidental_liquid_markup
    check_missing_article_date
    check_windows_linebreak
    check_unquoted_attributes
    check_link_to_index_html
    check_link_to_gone
    check_link_to_redirected
    check_mixed_content
    check_relative_urls
"

for check in $active_checks
do
    echo "Running $check..."
    wrong=$(time $check)
    test -n "$wrong" && error "$wrong"
done
