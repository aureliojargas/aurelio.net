Vídeo-Tutorial de PyObjC
Palestra "Tem cobra dentro da maçã - Como fazer um aplicativo Cocoa programando em Python (PyObjC)", ministrada na PyCon Brasil [3]
Joinville, 31 de Agosto de 2007, Aurelio Marinho Jargas


% 2007-08-29 4h Idéias, programa, workflow, preparação do ambiente
% 2007-08-30 9h30

% Avoids Link Unit at top (from config-clean.t2t)
%%!postproc: <BODY>	<body>

%!includeconf: /a/www/include/clean/config.t2t

%!options: --toc --enum-title
%!postproc: SITEROOT 	../../..

% txt2tags gotcha, remove 0. from titles
% <H2 ID="toc1">0.1. Apresentação</H2>
%!postproc: '(<H. ID="\w+?">)0\.'	'\1'
%!postproc: '(<LI><A .*?>)0\.'	'\1'

% Dirty-lazy inline CSS
%!postproc: '(ID="header")>'	'\1 style="margin-bottom:2em">'
%!postproc: '(ID="toc")>'	'\1 style="margin-top:1em">'
%!postproc: '<H2(>[0-9])'	'<H2 style="margin-top:4em"\1'
%!postproc: '<H3(>[0-9])'	'<H3 style="margin:2.5em 0 1em 0"\1' 
%!postproc: '<I>'	'<I style="font-size:90%;color:#888">'
%!postproc: '(id="main")'	'style="padding:1em 20% 4em 20%" \1'

% Autolink para as imagens
%!postproc: '(.*SRC="(pyobjc-app-.).mini.jpg.*)'	'<a href="\2.jpg">\1</a>'

% Caminhos dos cliques de menu em destaque
%!preproc: '^(  *{{br}})(.*)'	'\1//\2//'

% Link Google Video
%!postproc: GOOGLEVIDEO <embed style="width:400px; height:326px;" id="VideoPlayback" type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docId=-82892405626718533&hl=en" flashvars=""> </embed>

% Link para o vídeo original, com som
% http://ist.sociesc.org.br/download/pyConBrasil3/videos/Tem_Cobra_dentro_da_Ma%e7%e3_-_Como_fazer_um_aplicativo_Cocoa_programando_em_Python_(PyObjC).avi

%!include: /a/www/include/clean/cabecalho.t2t


% Roteiro da palestra "Tem cobra dentro da maçã - Como fazer um aplicativo Cocoa programando em Python (PyObjC)", ministrada na [""PyCon Brasil [3]"" http://pyconbrasil.com.br], por Aurelio Marinho Jargas.

**Veja o vídeo da palestra completa (34 minutos):**

""" {{center}}GOOGLEVIDEO{{/center}}{{p}}{{br}}{{/p}}

**Acompanhe o tutorial em seu Mac, seguindo estas instruções:**

%%TOC

== Apresentação ==

Este tutorial é uma demonstração do [PyObjC http://pyobjc.sourceforge.net], que faz a ponte entre [Python http://www.pythonbrasil.com.br] e [Cocoa ""http://en.wikipedia.org/wiki/Cocoa_(API)""], a poderosa API usada pelos aplicativos do [Mac OS X http://en.wikipedia.org/wiki/Mac_OS_X].

Com ele instalado, o programador usa o [Xcode http://en.wikipedia.org/wiki/Xcode] e o [Interface Builder http://en.wikipedia.org/wiki/Interface_Builder] normalmente, codificando em Python, sem precisar saber nada de [Objective-C http://en.wikipedia.org/wiki/Objective-C] ou [AppleScript http://en.wikipedia.org/wiki/AppleScript].

Os aplicativos resultantes funcionam exclusivamente no Mac, usufruindo de todas as suas tecnologias nativas.

%- http://pyconbrasil.com.br/sobre-o-evento/inscricoes/4fd65dd6065f80c705c1e16564f3a957

Para saber mais:
- [Tutorial da Apple sobre PyObjC http://developer.apple.com/cocoa/pyobjc.html]
- [Artigo introdutório de Ryan Wilcox http://scm.wilcoxd.com/blog/?p=36]
- [Human Interface Guidelines http://en.wikipedia.org/wiki/Human_Interface_Guidelines]
-


== Dolar - Versão com Outlets e Actions ==

  [dolar-1.jpg]  

[Baixe os fontes dolar.zip] (Zip, 60 KB)

=== Instale o ambiente de desenvolvimento ===

- Instale o Xcode ([leia instruções SITEROOT/mac/dev/#xcode])
- --Instale o PyObjC-- À partir do Leopard, o PyObjC já faz parte do sistema.
% ([leia instruções http://pyobjc.sourceforge.net/doc/install.php])
-

=== Crie um projeto novo e salve na mesa ===

- Abra o Xcode
- New Project > Application > PyObjC Application
- Project Directory: ~/Desktop/**Dolar**


=== Veja os arquivos criados ===

- Info.plist
  - CFBundleShortVersionString
  - Copyright
- setup.py
  - Construção do aplicativo
  - Não precisa mexer
- **Dolar**.py
  - Arquivo principal do programa
  - Não precisa mexer
- **Dolar**AppDelegate.py
  - Classe base para brincar (já instanciada no Interface Builder)
  - Coloque aqui seus métodos
- MainMenu.nib
  - Editável no Interface Builder (chamado de IB daqui adiante)
  - Arquivo com as definições de posicionamentos e **conexões** entre elementos


=== Crie a interface no IB ===

- Chame o Interface Builder
  {{br}}Duplo clique no MainMenu.nib
- Mostre o Inspetor
  {{br}}Tools > Show Inspector
- Dê um título para a janela
  {{br}}Inspetor > Attributes > Window Title: Conversor Dólar - Real
- Ligue as guias de posicionamento
  {{br}}Layout > Guides > Enable Aqua Guidelines
- Mostre as paletas
  {{br}}Tools > Palettes > Show Palettes
- Arraste os elementos para a janela
  - 3 labels
    {{br}}Paleta > Text > System Font Text
  - 3 caixas de texto
    {{br}}Paleta > Text > NSTextField
  - 1 botão
    {{br}}Paleta > Controls > Button
- Coloque nomes nos labels e no botão
  {{br}}Duplo clique no elemento
  - Cotação do dia:
  - Dólares:
  - Reais:
  - Converter


=== Crie as ligações para comunicar-se com a classe ===

- Duplo clique na instância do AppDelegate (cubo azul)
- Adicione outlets para as caixas de texto
  {{br}}Inspetor > Attributes > Outlets > Add
  - cotacao
  - dolares
  - reais
- Adicione um action para o botão
  {{br}}Inspetor > Attributes > Action > Add
  - converte:


=== Conecte os elementos com as ligações ===

- Conecte os outlets com suas respectivas caixas de texto
  - Ctrl-click na instância do AppDelegate (cubo azul)
  - Arrasta até a caixa de texto da cotação
  - Inspetor > Connections > Outlets > cotacao > Connect
  - Repita para as outras caixas de texto
- Conecte o botão com sua ação
  - Ctrl-click no botão
  - Arrasta até a instância do AppDelegate
  - Inspetor > Connections > Target/Action > converte: > Connect


=== Crie o executável ===

- Volte ao Xcode
- Project > New Custom Executable...
  - Executable Name: **Dolar** (uma palavra para não complicar)
  - Executable Path: /usr/bin/env
- Groups & Files > Executables > Seleciona teu executável
- File > Get Info > Arguments > Botão [+]
  - Argument: **Dolar**.app/Contents/MacOS/**Dolar**


=== Teste o programa ===

- Build > Build and Run
- Botão não faz nada
- Veja no log a mensagem sobre falha na conexão do action converte:


=== Arrume o erro do log ===

- Edite o código Python
  {{br}}Duplo clique em **Dolar**AppDelegate.py
- Dentro da classe, crie o método converte_
  - def converte_(self, sender): pass
  - Sempre lembre-se que ":" deve virar "_" no nome do método
  - Teste o programa novamente
- Agora sem erros no log, mas o botão continua sem ação


=== Descubra objetos e métodos ===

- Coloque comandos dentro do converte_()
  - print self.cotacao # outlet
  - <NSTextField: 0x154c110>
- Rode e teste o programa
- Descubra os métodos do NSTextField
  - Chame a Ajuda para o Cocoa
    {{br}}Help > Documentation > Search Groups > Cocoa
  - Faça a pesquisa pelo elemento
    {{br}}Digite NSTextField na caixa de busca
- Veja os métodos
  - Nenhum em especial
- Veja os métodos do pai NSControl (herdado)
  - floatValue()
- Mude o print para mostrar o conteúdo da caixa de texto
  - print self.dolares.floatValue()
    - self: Instância da classe (Python)
    - dolares: Outlet de comunicação (Interface Builder)
    - floatValue(): Método do NSTextField (Objective-C)
    - Salada! :)
- Rode e teste o programa


=== Faça o algoritmo do cálculo ===

- dolares = self.dolares.floatValue()
- cotacao = self.cotacao.floatValue()
- reais = dolares * cotacao
- print reais


=== Descubra como gravar o conteúdo do TextField ===

- Veja Documentação novamente
- Ache o setFloatValue: do NSControl
- Grave o resultado do cálculo na caixa de texto dos Reais
  - self.reais.setFloatValue_(reais)
  - Lembre-se que no Python o ":" vira "_"
- Rode e teste o programa


=== Melhorando: Use formatadores de dinheiro ===

- Vá no IB
- Arraste o formatador de dinheiro para cada caixa de texto da cotação
  {{br}}Paleta > Text > NSNumberFormatter
- Configure o formatador para nossa moeda
  {{br}}Inspetor > Formatter > [x] Localize
- Repita o procedimento para as caixas de dólares e reais
- Rode e teste o programa


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

== Dolar - Versão com Bindings ==

  [dolar-2.jpg]  

[Baixe os fontes dolar-bindings.zip] (Zip, 60 KB)

=== Crie um projeto novo para Bindings ===

- Salve e feche projeto atual no Xcode e IB
- Vá na mesa
  {{br}}F11
- Duplique o diretório do projeto
  {{br}}Command-D
- Renomeie a pasta nova para: Dolar Bindings
- Entre nessa pasta e abra o arquivo **Dolar**.xcodeproj
- Rode o programa para ter certeza que tudo continua funcionando
  {{br}}Build > Build and Run


=== Limpe os Outlets e Actions ===

- Vá no IB
  {{br}}Duplo clique no MainMenu.nib
- Apague todos os outlets
  {{br}}Duplo clique na instância do AppDelegate (cubo azul)
  {{br}}Inspetor > Attributes > Outlets > Remove
- Apague o Action
  {{br}}Inspetor > Attributes > Action > Remove
- Apague o botão "Converter", pois não será mais usado
  {{br}}Selecione o botão na janela e aperte Delete


=== Crie os Bindings no IB ===

- Selecione a caixa de texto da cotação
- Inspetor > Bindings > Value > value
  - Bind to: **Dolar**AppDelegate
  - Model Key Path: cotacao
  - [x] Continuously Update Values
    - Isso mandará uma ação a cada alteração no texto da caixa
    - E chamará automaticamente o método setCotacao_ no Python
    - O nome do método é sempre "set" + capitalize(Model Key Path) + "_"
- Repita o procedimento para as outras caixas de texto


=== Crie os Bindings no Python ===

- Vá no Xcode
- Edite o **Dolar**AppDelegate.py
- Importe o módulo "objc"
  - import objc
- Logo após a declaração da classe DolarAppDelegate, crie três "ivar"
  - cotacao = objc.ivar(u"cotacao")
  - dolares = objc.ivar(u"dolares")
  - reais = objc.ivar(u"reais")
- Atente aos detalhes
  - Lembre-se que o nome do binding vem em Unicode
  - Esse nome do binding é o Model Key Path que você preencheu no IB
  - Cada um destes bindings representa o **conteúdo** da caixa de texto


=== Crie o método para converter Dólares em Reais ===

- Ao se digitar o valor em dólares, o valor em reais será calculado automaticamente
- Para isso, crie o método que cuidará das alterações na caixa de dólares
  - def setDolares_(self, valor):
  - Lembre-se do _ no final, pois recebe argumento
- Guarde o valor digitado pelo usuário na referência ao binding (ivar)
  - self.dolares = valor
- Faça as contas e guarde o resultado
  - self.reais = self.dolares * self.cotacao
  - O resultado será atualizado automaticamente
- Rode e teste o programa


=== Crie o método para converter Reais em Dólares ===

- Ao se digitar o valor em reais, o valor em dólares será calculado automaticamente
- Similar ao passo anterior, crie o método set
  - def setReais_(self, valor):
- Guarde o valor e faça o cálculo
  - self.reais = valor
  - self.dolares = self.reais / self.cotacao
- Rode e teste o programa
- Perceba que o antigo método converte_() não é mais necessário


=== Melhorias na interface ===

- Visualização dos resultados
  - Crie outros labels usando letras grandes e coloridas para mostrar os valores em reais e dólares
  - Faça bindings destes textos com o conteúdo das caixas de texto, para serem atualizados automaticamente
- Usabilidade
  - Use um binding para esconder as caixas de dólares e reais enquanto a cotação não for digitada
  - Inspetor > Bindings > Availability > hidden
    - Bind to: **Dolar**AppDelegate
    - Model Key Path: cotacao
    - Value Transformer: NSIsNil
  - Isso deixa claro para o usuário que a cotação deve ser digitada primeiro
  - Além de evitar a necessidade de verificações no código Python, pois a cotação sempre vai estar preenchida
    - Chega de "if self.cotacao:" nos setFoo_()


  [dolar-3-1.jpg]  

  [dolar-3-2.jpg]  

  [dolar-3-3.jpg]  

[Baixe os fontes dolar-bindings-melhorado.zip] (Zip, 68 KB)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


== Outros Programas ==

=== Markup Babel - Interface Cocoa para programa de console ===

Um exemplo de como fazer um interface Cocoa para um programa Python já existente. O aplicativo [txt2tags http://txt2tags.sf.net/pt] foi usado como módulo, convertendo textos automaticamente enquanto o usuário digita. Foi usada a técnica de binding no conteúdo com o método setReferencia_() agindo a cada tecla digitada.

  [pyobjc-app-1.mini.jpg] 

[Baixe os fontes markup-babel.zip], abra no Xcode e rode (Build and Run).


=== contatos.py - Programa de linha de comando com PyObjC ===

Um exemplo de como usar o PyObjC para programas de linha de comando. É utilizado o framework da Agenda do Mac (Address Book), acessando os dados dos contatos em tempo real e mostrando na tela.

[Baixe os fontes contatos.py] e execute no Terminal.app: **python contatos.py**

=== AB Reports - Programa complexo ===

Um exemplo de como fazer um programa mais complexo, utilizando as tecnologias disponíveis no Mac OS X.

- Data source (tabelas)
  - Ordenar os dados pela coluna FOO (ordem direta e reversa)
  - Trocar colunas de lugar (arrastando)
- Live search
  - Com o uso de bindings, fazer pesquisas em tempo real, enquanto digita
- Picture resize
  - Com o uso de sliders e bindings, fica fácil alterar o tamanho das fotos em tempo real, enquanto arrasta o botão
- Performance
  - Mesmo lidando com muitos dados e fotos, a performance fica excelente
  - O PyObjC não sobrecarrega o aplicativo, é uma ponte enxuta


  [pyobjc-app-3.mini.jpg] 


Programa ainda inacabado, fontes não disponíveis.

%!include: /a/www/include/clean/footer.t2t
